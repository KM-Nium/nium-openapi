openapi: 3.0.3
info:
  contact:
    email: experience@nium.com
    name: NIUM Platform
    url: https://www.nium.com
  description: NIUM Platform
  license:
    name: Copyright (c) 2023 NIUM
  title: NIUM Platform
  version: 10.31.2023
servers:
- url: https://gatewaysandbox.nium.com/
tags:
- name: Customer Wallet Balance
  description: REST API's for Customer Wallet Balance
- name: Wallet to Wallet Transfers
  description: REST API's for Wallet to Wallet Transfers
- name: Customer Wallet Transactions
  description: REST API's for Customer Wallet Transactions
paths:
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}:
    get:
      parameters:
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
          example: '{{clientHashId}}'
      - description: Unique customer identifier generated on customer creation.
        in: path
        name: customerHashId
        required: true
        schema:
          type: string
      - description: Unique wallet identifier generated simultaneously with customer
          creation.
        in: path
        name: walletHashId
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/WalletBalanceResponseDTO'
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
          description: BadRequest
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
          description: Internal Server Error
      tags:
      - Customer Wallet Balance
      deprecated: false
      description: This API allows you to fetch balance for a specific wallet.
      operationId: WalletBalance
      summary: Wallet Balance
      x-info:
        apiType: external
      security:
      - default: []
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/transfers:
    post:
      parameters:
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: Unique customer identifier generated on customer creation.
        in: path
        name: customerHashId
        required: true
        schema:
          type: string
      - description: Unique source wallet identifier generated simultaneously with
          customer creation.
        in: path
        name: walletHashId
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FundTransferResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
          description: BadRequest
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
          description: Internal Server Error
      tags:
      - Wallet to Wallet Transfers
      deprecated: false
      description: This API allows you to transfer the money from one wallet to another
        wallet for customers belonging to different client.
      operationId: WalletTransfer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FundTransferRequestDTO'
        description: fundTransferRequestDTO
        required: true
      summary: Wallet to Wallet Transfer
      x-info:
        apiType: external
      security:
      - default: []
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/p2pTransfer:
    post:
      parameters:
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
          example: '{{clientHashId}}'
      - description: Unique customer identifier generated on customer creation.
        in: path
        name: customerHashId
        required: true
        schema:
          type: string
      - description: Unique wallet identifier generated simultaneously with customer
          creation.
        in: path
        name: walletHashId
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P2PTransferResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
          description: BadRequest
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
          description: Internal Server Error
      tags:
      - Wallet to Wallet Transfers
      deprecated: false
      description: "This API allows you to transfer money from one wallet to another\
        \ wallet within the same client family. \n >\u26A0\uFE0F WARNING \n >This\
        \ API version is deprecated. Eventually, a deprecated API version becomes\
        \ unsupported. Use the [Wallet To Wallet Transfer](ref:wallettransfer) API\
        \ to achieve the same functionality."
      operationId: P2PTransfer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/P2PTransferDTO'
        description: p2pTransferDTO
        required: true
      summary: P2P Transfer
      x-info:
        apiType: external
      security:
      - default: []
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/transactions:
    get:
      parameters:
      - description: This parameter can be used to filter the transactions based on
          the authorization code. In case of fund wallet transactions you can provide
          the systemReferenceNumber as value.
        in: query
        name: authCode
        required: false
        schema:
          type: string
      - description: This parameter can filter the transactions based on auth currency
          and accepts 3-letter [ISO-4217 transaction currency code](https://docs.nium.com/apis/docs/currency-and-country-codes).
        in: query
        name: authCurrency
        required: false
        schema:
          type: string
      - description: This parameter can filter the transactions based on businessTransaction
          flag.
        in: query
        name: businessTransaction
        required: false
        schema:
          type: string
      - description: This field can apply the filter based on the unique card identifier
          generated during new/add-on card issuance.
        in: query
        name: cardHashId
        required: false
        schema:
          type: string
      - description: This field contains the unique child customer identifier generated
          when new child customer created.
        in: query
        name: childCustomerHashId
        required: false
        schema:
          type: string
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
          example: '{{clientHashId}}'
      - description: Unique customer identifier generated on customer creation.
        in: path
        name: customerHashId
        required: true
        schema:
          type: string
      - description: End date for fetching the transaction details. The format for
          endDate is YYYY-MM-DD.
        in: query
        name: endDate
        required: false
        schema:
          type: string
      - description: This parameter can filter the transactions based on 4-digit Merchant
          Category Codes.
        in: query
        name: mcc
        required: false
        schema:
          type: string
      - description: This parameter describes the merchant's type of business product
          or service, also known as the Merchant Category Code (MCC) such as Airlines,
          Restaurants etc.
        in: query
        name: merchantCategories
        required: false
        schema:
          type: string
      - description: This parameter can filter the transactions based on the merchant
          city field.
        in: query
        name: merchantCity
        required: false
        schema:
          type: string
      - description: This parameter can filter the transactions based on comma-separated
          list of 2-letter ISO merchant countries.
        in: query
        name: merchantCountries
        required: false
        schema:
          type: string
      - description: This parameter can filter the transactions based on the merchant
          country field.
        in: query
        name: merchantCountry
        required: false
        schema:
          type: string
      - description: This parameter can filter the transactions based on the merchant
          name field.
        in: query
        name: merchantName
        required: false
        schema:
          type: string
      - description: The sort order for the results.
        example: DESC
        in: query
        name: order
        required: false
        schema:
          enum:
          - ASC
          - DESC
          type: string
      - description: This API may have lot of data in response and supports pagination.
          Entire response data is divided into pages with size as the upper limit
          on the number of data. Integer values from 0 onwards are acceptable.\nDefault
          page is 0.
        example: 0
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
      - description: This parameter can filter the transactions based on comma-separated
          paymentInstrumentHashId.
        in: query
        name: paymentInstrumentHashId
        required: false
        schema:
          type: string
      - description: Property
        in: query
        name: property
        required: false
        schema:
          type: string
      - description: This parameter can filter the transactions based on the settlement
          date of the transaction in format yyyyMMdd.
        in: query
        name: settlementDate
        required: false
        schema:
          type: string
      - description: This parameter can filter the transactions based on settlement
          status. The detailed list of possible values is available in the response
          of this API.
        in: query
        name: settlementStatus
        required: false
        schema:
          type: string
      - description: This will decide the number of elements per page. Typical values
          can be 1-20.
        example: 20
        in: query
        name: size
        required: false
        schema:
          format: int32
          type: integer
      - description: From date for fetching the transaction details. The format for
          startDate is YYYY-MM-DD.
        in: query
        name: startDate
        required: false
        schema:
          type: string
      - description: This parameter can filter the transactions based on status. The
          detailed list of possible values is available in the response of this API.
        in: query
        name: status
        required: false
        schema:
          enum:
          - 'NULL'
          - IN_PROGRESS
          - ACTION_REQUIRED
          - RFI_REQUESTED
          - RFI_RESPONDED
          - COMPLETED
          - ERROR
          - REJECT
          - EXPIRED
          type: string
      - description: This parameter can be used to filter the transactions based on
          the systemReferenceNumber.
        in: query
        name: systemReferenceNumber
        required: false
        schema:
          type: string
      - description: This parameter can filter the transactions based on systemTraceAuditNumber.
        in: query
        name: systemTraceAuditNumber
        required: false
        schema:
          type: string
      - description: This parameter can filter the transactions, based on the exact
          value of tagKey defined against transactions. This can be used as an independent
          search parameter.
        in: query
        name: tagKey
        required: false
        schema:
          type: string
      - description: This parameter can filter the transactions, based on the approximating
          value of tagValue(that may be mapped for a tagKey defined against transactions).
          This can be used as an independent search parameter.
        in: query
        name: tagValue
        required: false
        schema:
          type: string
      - description: This field contains the 3-letter [ISO-4217 transaction currency
          code](https://www.iso.org/iso-4217-currency-codes.html).
        in: query
        name: transactionCurrency
        required: false
        schema:
          type: string
      - description: This field contains the transaction can be one of the complete
          list of transactions mentioned in [Glossary of Transaction Types](https://docs.nium.com/baas/get-transactions#glossary-of-transaction-types).
        in: query
        name: transactionType
        required: false
        schema:
          type: string
      - description: This parameter can filter the transactions based on transactionsLabelsKey.
        in: query
        name: transactionsLabelsKey
        required: false
        schema:
          type: string
      - description: This parameter can filter the transactions based on transactionsLabelsValue.
        in: query
        name: transactionsLabelsValue
        required: false
        schema:
          type: string
      - description: Unique wallet identifier generated simultaneously with customer
          creation.
        in: path
        name: walletHashId
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletTransactionsResponseDTO'
              example:
                content:
                - tags:
                    department: ACCOUNTS
                    internalReferenceNumber: '123456789'
                    sourcingChannel: DIGITAL
                    testKey1: testkeyvalue1
                  acquirerCountryCode: 'null'
                  acquiringInstitutionCode: 'null'
                  authAmount: 62
                  authCode: FW4526424507
                  authCurrencyCode: SGD
                  billingAmount: 62
                  billingConversionRate: 'null'
                  billingCurrencyCode: SGD
                  billingReplacementAmount: 0
                  businessTransaction: false
                  cardHashID: 'null'
                  cardTransactionAmount: 62
                  comments: Bank transfer wallet credit
                  complianceStatus: RFI_REQUESTED
                  createdAt: '2021-03-26 14:22:48'
                  currentWithHoldingBalance: 0
                  dateOfTransaction: '2021-03-26'
                  debit: false
                  effectiveAuthAmount: 62
                  labels:
                    bankReferenceNumber: DUMMYBANKREF
                    destinationCountry: SG
                    iccPayMode: FAST
                    iccReceivedAt: '2019-04-15T12:26:01.31Z'
                    iccSource: DBSSG
                    remitterAccountNumber: '9876'
                    remitterBankName: Bank of Singapore
                    remitterName: Paul Walker
                    uniquePayerId: DBS cards
                    uniquePaymentId: '8850932067971'
                  localDate: 'null'
                  localTime: 'null'
                  maskedCardNumber: 'null'
                  mcc: 'null'
                  merchantCategory: ''
                  merchantCity: 'null'
                  merchantCountry: 'null'
                  merchantID: 'null'
                  merchantLatitude: 'null'
                  merchantLongitude: 'null'
                  merchantName: 'null'
                  merchantNameLocation: 'null'
                  merchantTaggedName: 'null'
                  merchantZoomIndex: 'null'
                  originalAuthorizationCode: 'null'
                  partnerReferenceNumber: 'null'
                  paymentInstrumentHashId: 'null'
                  posConditionCode: 'null'
                  posEntryCapabilityCode: 'null'
                  posEntryMode: '1020'
                  previousBalance: 1191
                  processingCode: 'null'
                  receiptFileName: 'null'
                  receiptType: 'null'
                  retrievalReferenceNumber: FW4526424507
                  rfiDetails:
                  - description: agreementOfSale
                    documentType: POA
                    mandatory: true
                    remarks: Provide an agreement for sale
                    requiredData:
                    - fieldLabel: Agreement Of Sale
                      fieldValue: identificationDocument
                      type: document
                    rfiHashId: 9c28bbfb-4c83-44cb-9a07-8e9f0596558a
                    rfiId: 8261ad61-bac1-4987-9ef4-a4dab9a516f1
                    rfiStatus: RFI_RESPONDED
                    transactionEntityType: DEBTOR
                    type: document
                  rhaTransactionId: 'null'
                  settlementAmount: 62
                  settlementAuthAmount: 62
                  settlementDate: 'null'
                  settlementStatus: UNSETTLED
                  settlementTransactionAmount: 62
                  status: PENDING
                  systemTraceAuditNumber: FW4526424507
                  terminalID: 'null'
                  transactionCurrencyCode: SGD
                  transactionReplacementAmount: 0
                  transactionType: Wallet_Credit_Mode_Offline
                  updatedAt: '2021-03-26 14:22:54'
                totalElements: 1
                totalPages: 1
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
          description: BadRequest
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
          description: Internal Server Error
      tags:
      - Customer Wallet Transactions
      deprecated: false
      description: This API allows you to fetch transaction details for a customer.
      operationId: Transactions
      summary: Transactions
      x-info:
        apiType: external
      security:
      - default: []
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/transactions/{transactionId}/business:
    put:
      parameters:
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
          example: '{{clientHashId}}'
      - description: Unique customer identifier generated on customer creation.
        in: path
        name: customerHashId
        required: true
        schema:
          type: string
      - description: Transaction Id is NIUM generated 36 character UUID which is unique,
          per transaction.
        in: path
        name: transactionId
        required: true
        schema:
          type: string
      - description: Unique wallet identifier generated simultaneously with customer
          creation.
        in: path
        name: walletHashId
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
          description: BadRequest
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
          description: Internal Server Error
      tags:
      - Customer Wallet Transactions
      deprecated: false
      description: This API allows you to update a flag against each transaction signifying
        that the transaction is a business transaction.
      operationId: UpdateBusinessTransactionFlag
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionsBusinessDTO'
        description: transactionsBusinessDTO
        required: true
      summary: Update Business Transaction Flag
      x-info:
        apiType: external
      security:
      - default: []
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/transactions/{transactionId}/location:
    put:
      parameters:
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
          example: '{{clientHashId}}'
      - description: Unique customer identifier generated on customer creation.
        in: path
        name: customerHashId
        required: true
        schema:
          type: string
      - description: Transaction Id is NIUM generated 36 character UUID which is unique,
          per transaction.
        in: path
        name: transactionId
        required: true
        schema:
          type: string
      - description: Unique wallet identifier generated simultaneously with customer
          creation.
        in: path
        name: walletHashId
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
          description: BadRequest
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
          description: Internal Server Error
      tags:
      - Customer Wallet Transactions
      deprecated: false
      description: This API allows you to update a transaction with merchant location.
      operationId: TransactionGeo-Tagging
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionsLocationDTO'
        description: transactionsLocationDTO
        required: true
      summary: Transaction Geo-Tagging
      x-info:
        apiType: external
      security:
      - default: []
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/transactions/{transactionId}/receipt:
    get:
      parameters:
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
          example: '{{clientHashId}}'
      - description: Unique customer identifier generated on customer creation.
        in: path
        name: customerHashId
        required: true
        schema:
          type: string
      - description: Transaction Id is NIUM generated 36 character UUID which is unique,
          per transaction.
        in: path
        name: transactionId
        required: true
        schema:
          type: string
      - description: Unique wallet identifier generated simultaneously with customer
          creation.
        in: path
        name: walletHashId
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TransactionsReceiptDTO'
          description: OK
        '400':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WalletApiError'
          description: BadRequest
        '401':
          content:
            '*/*':
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            '*/*':
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WalletApiError'
          description: Not Found
        '500':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WalletApiError'
          description: Internal Server Error
      tags:
      - Customer Wallet Transactions
      deprecated: false
      description: This API allows you to download a receipt against each transaction.
      operationId: DownloadTransactionReceipt
      summary: Download Transaction Receipt
      x-info:
        apiType: external
      security:
      - default: []
    post:
      parameters:
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
          example: '{{clientHashId}}'
      - description: Unique customer identifier generated on customer creation.
        in: path
        name: customerHashId
        required: true
        schema:
          type: string
      - description: Transaction Id is NIUM generated 36 character UUID which is unique,
          per transaction.
        in: path
        name: transactionId
        required: true
        schema:
          type: string
      - description: Unique wallet identifier generated simultaneously with customer
          creation.
        in: path
        name: walletHashId
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WalletApiError'
          description: OK
        '400':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WalletApiError'
          description: BadRequest
        '401':
          content:
            '*/*':
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            '*/*':
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WalletApiError'
          description: Not Found
        '500':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WalletApiError'
          description: Internal Server Error
      tags:
      - Customer Wallet Transactions
      deprecated: false
      description: This API allows you to upload a receipt against each transaction.
      operationId: UploadTransactionReceipt
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionsReceiptDTO'
        description: transactionReceipt
        required: true
      summary: Upload Transaction Receipt
      x-info:
        apiType: external
      security:
      - default: []
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/transactions/{transactionId}/tags:
    post:
      parameters:
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
          example: '{{clientHashId}}'
      - description: Unique customer identifier generated on customer creation.
        in: path
        name: customerHashId
        required: true
        schema:
          type: string
      - description: Unique transaction Identifier generated and shared before API
          handshake.
        in: path
        name: transactionId
        required: true
        schema:
          type: string
      - description: Unique wallet identifier generated simultaneously with customer
          creation.
        in: path
        name: walletHashId
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TransactionClientTagsResponseDTO'
          description: OK
        '400':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WalletApiError'
          description: BadRequest
        '401':
          content:
            '*/*':
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            '*/*':
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WalletApiError'
          description: Not Found
        '500':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WalletApiError'
          description: Internal Server Error
      tags:
      - Customer Wallet Transactions
      deprecated: false
      description: This API allows you to add, update, and delete transaction tags.
      operationId: ManageTransactionTags
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionClientTagsRequestDTO'
        description: tags
        required: true
      summary: Manage Transaction Tags
      x-info:
        apiType: external
      security:
      - default: []
components:
  schemas:
    WalletApiError:
      properties:
        errors:
          description: List of errors occurred.
          example:
          - field1 is not valid
          - field2 is not valid
          items:
            type: string
          type: array
        message:
          description: Error message descriptor.
          example: Error message descriptor.
          type: string
        status:
          description: 'HttpStatus of the request : BAD_REQUEST, INTERNAL_SERVER_ERROR.'
          enum:
          - 200 OK
          - 400 BAD_REQUEST
          - 403 FORBIDDEN
          - 404 NOT_FOUND
          - 500 INTERNAL_SERVER_ERROR
          - 502 BAD_GATEWAY
          - 503 SERVICE_UNAVAILABLE
          example: BAD_REQUEST
          type: string
      title: ApiError
      type: object
    ClientCustomTagDTO:
      properties:
        key:
          description: 'This field accepts the Client''s custom key of the tag.

            The maximum key length limit is 128 characters.'
          type: string
        value:
          description: 'This field accepts the Client''s custom value of the tag.

            The maximum value length limit is 256 characters.'
          type: string
      title: Client custom tag
      type: object
    DeviceDetailsDTO:
      properties:
        countryIP:
          description: This field accepts the country IP for the device by the customer
            for initiating the request.
          example: 66.249.74.64
          type: string
        deviceInfo:
          description: This field accepts the device information used by the customer
            for initiating the request.
          example: macOS
          type: string
        ipAddress:
          description: This field accepts the IP address of the device used by the
            customer for initiating the request.
          example: 45.48.241.198
          type: string
        sessionId:
          description: This field accepts the session Id for the session of the customer
            for initiating the request.
          example: 40531ac01a6f11edafc28dba55d51275
          type: string
      title: Device details
      type: object
    FundTransferRequestDTO:
      properties:
        tags:
          items:
            $ref: '#/components/schemas/ClientCustomTagDTO'
          type: array
        authenticationCode:
          description: 'This field accepts the authentication code generated as part
            of SCA (Strong Customer Authentication).

            Note: Authentication code is expected if regulatory region is UK or EU.'
          example: authCode
          type: string
        customerComments:
          description: This field accepts customer comments for the wallet to wallet
            transfer.
          example: Paid for lunch
          type: string
        destinationAmount:
          description: The amount to be transferred.
          example: 50
          format: double
          type: number
        destinationCurrencyCode:
          description: This field accepts the 3-letter [ISO-4217 currency code](doc:currency-and-country-codes)
            for the amount.
          example: SGD
          type: string
        destinationWalletHashId:
          description: "The walletHashId of Nium\u2019s customer who is the recepient\
            \ of the funds."
          example: c69f684f-a306-4c4a-8daa-1e91ce7c85f8
          type: string
        deviceDetails:
          $ref: '#/components/schemas/DeviceDetailsDTO'
          description: This object accepts the device and IP details for the transaction.
        exemptionCode:
          description: 'This field accepts the reason code for the exemption provided
            as part of SCA (Strong Customer Authentication). Allowed values:

            01 - Trusted Beneficiary

            02 - Low Value Transaction

            03 - Recurring Transactions

            04 - Payment to Self


            Note: Exemption code is required if regulatory region is UK or EU'
          example: '01'
          type: string
        purposeCode:
          description: This field accepts the purpose code for the payment. Refer
            to the [Glossary of Purpose Codes](doc:purpose-of-transfer-codes) to identify
            the correct value to be provided.
          example: IR01802
          type: string
        sourceAmount:
          description: The amount to be transferred.
          example: 50
          format: double
          type: number
        sourceCurrencyCode:
          description: This field accepts the 3-letter [ISO-4217 currency code](doc:currency-and-country-codes)
            for the amount.
          example: SGD
          type: string
      required:
      - destinationAmount
      - destinationCurrencyCode
      - destinationWalletHashId
      - purposeCode
      - sourceAmount
      - sourceCurrencyCode
      title: FundTransferRequestDTO
      type: object
    FundTransferResponse:
      properties:
        message:
          description: This field provides the message in case of errors. In case
            of success, it is null.
          example: 'null'
          type: string
        status:
          description: The status value can be Pending or Approved.
          enum:
          - ACTIVE
          - INACTIVE
          - BLOCKED
          - SUSPENDED
          - UPLOADED
          - APPROVED
          - REJECTED
          - FAILED
          - SUCCESS
          - FAILURE
          - PARTIALLY SUCCESS
          - SYNC
          - NOT SYNC
          - PENDING
          - REQUIRES_ACTION
          - CLEAR
          - DECLINED
          - ACCOUNT_BLOCKED
          - AMOUNT_BLOCKED
          example: APPROVED
          type: string
        systemReferenceNumber:
          description: Unique auth code generated for the transaction by the card
            issuance platform.
          example: FT6449832977
          type: string
      title: FundTransferResponse
      type: object
    MerchantCategoryResponseDTO2:
      properties:
        description:
          description: Description for MCC.
          example: Ice cream shops, Fast Food Restaurants
          type: string
        mccCode:
          description: This is four-digit Visa Merchant Category Code.
          example: '5814'
          type: string
        merchantCategory:
          description: NIUM categorization of MCC.
          example: Food n Beverage
          type: string
      title: Merchant category response
      type: object
    P2PTransferDTO:
      properties:
        amount:
          description: The amount to be transferred.
          example: 50
          format: double
          type: number
        authenticationCode:
          description: 'This field accepts the authentication code generated as part
            of SCA (Strong Customer Authentication).

            Note: Authentication code is expected if regulatory region is UK or EU.'
          example: authCode
          type: string
        countryIP:
          type: string
        currencyCode:
          description: This field accepts the 3-letter [ISO-4217 currency code](doc:currency-and-country-codes)
            for the amount.
          example: SGD
          type: string
        customerComments:
          description: 'This field accepts customer comments for the P2P transfer.

            Maximum character limit is 512'
          example: Paid for lunch
          type: string
        destinationWalletHashId:
          description: The wallet hash Id under the same client which will receive
            the funds.
          example: c69f684f-a306-4c4a-8daa-1e91ce7c85f8
          type: string
        deviceInfo:
          type: string
        exemptionCode:
          description: 'This field accepts the reason code for the exemption provided
            as part of SCA (Strong Customer Authentication), which can be one of the
            following values:

            01 - Trusted Beneficiary

            02 - Low Value Transaction

            03 - Recurring Transactions

            04 - Payment to Self


            Note: Exemption code is expected if regulatory region is UK or EU'
          example: '01'
          type: string
        ipAddress:
          type: string
        sessionId:
          type: string
      required:
      - amount
      - currencyCode
      - destinationWalletHashId
      title: P2P transfer
      type: object
    P2PTransferResponse:
      properties:
        message:
          description: This field provides the message in case of errors. In case
            of success, it is null.
          example: 'null'
          type: string
        retrievalReferenceNumber:
          description: Unique auth code generated for the transaction by the card
            issuance platform. This field shall be deprecated in future. Clients should
            use systemReferenceNumber.
          example: FT6449832977
          type: string
        status:
          description: The status value can be Pending or Approved.
          enum:
          - ACTIVE
          - INACTIVE
          - BLOCKED
          - SUSPENDED
          - UPLOADED
          - APPROVED
          - REJECTED
          - FAILED
          - SUCCESS
          - FAILURE
          - PARTIALLY SUCCESS
          - SYNC
          - NOT SYNC
          - PENDING
          - REQUIRES_ACTION
          - CLEAR
          - DECLINED
          - ACCOUNT_BLOCKED
          - AMOUNT_BLOCKED
          example: APPROVED
          type: string
        success:
          description: This flag is used to specify if the transfer was successful
            or not.
          example: true
          type: boolean
        systemReferenceNumber:
          description: Unique auth code generated for the transaction by the card
            issuance platform.
          example: FT6449832977
          type: string
      title: P2P transfer response
      type: object
    WalletRfiAttributeResponse:
      properties:
        label:
          description: This field contains the field label for the RFI.
          type: string
        type:
          description: This field contains the field type. The possible values are
            data or document.
          type: string
        value:
          description: This field contains the field value for the RFI. This will
            be used while responding to transaction RFI.
          type: string
      title: RfiAttributeResponse
      type: object
    TransactionClientTagRequestDTO:
      properties:
        action:
          description: 'This field accepts the action which determines the type of
            operation that needs to be performed. The possible values are:

            DELETE: When tag needs to be deleted.

            MAINTAIN: When tags need to be added or updated.'
          enum:
          - MAINTAIN
          - DELETE
          type: string
        key:
          description: 'This field accepts the name of the tag.

            The maximum key length limit is 128 characters.'
          type: string
        value:
          description: 'This field accepts the value of the tag.

            The maximum value length limit is 256 characters.'
          type: string
      required:
      - action
      - key
      title: Transaction client tag request
      type: object
    TransactionClientTagResponseDTO:
      properties:
        key:
          type: string
        message:
          type: string
      title: Transaction client tag response
      type: object
    TransactionClientTagsRequestDTO:
      properties:
        tags:
          description: 'This object accepts the user defined key-value pairs.

            The maximum number of tags allowed is 15.'
          items:
            $ref: '#/components/schemas/TransactionClientTagRequestDTO'
          type: array
      required:
      - tags
      title: Transaction client tags request
      type: object
    TransactionClientTagsResponseDTO:
      properties:
        tags:
          items:
            $ref: '#/components/schemas/TransactionClientTagResponseDTO'
          type: array
      title: Transaction client tags response
      type: object
    TransactionResponseDTO:
      properties:
        tags:
          additionalProperties:
            type: string
          description: This object contains the user defined key-value pairs provided
            by the client.
          type: object
        acquirerCountryCode:
          description: This field contains the country code of the acquirer.
          type: string
        acquiringInstitutionCode:
          description: This field contains the acquiring institution code that identifies
            the financial institution acting as the acquirer of the transaction.
          type: string
        authAmount:
          description: This field contains an authorization amount of the transaction.
          format: double
          type: number
        authCode:
          description: This field contains the authorization code.
          type: string
        authCurrencyCode:
          description: This field contains the 3-letter [ISO-4217 currency code](doc:currency-and-country-codes)
            of the auth currency, the currency in which amount is deducted from wallet.
          type: string
        billingAmount:
          description: This field contains the equivalent transaction amount in base
            currency.
          format: double
          type: number
        billingConversionRate:
          description: This field contains the conversion rate of transaction currency
            to billing currency which is present for all card transactions.
          type: string
        billingCurrencyCode:
          description: This field contains the 3-letter [ISO-4217 currency code](doc:currency-and-country-codes)
            for the billing currency or base currency
          type: string
        billingReplacementAmount:
          description: The corrected amount of a transaction in a partial reversal.
            This is defined by ISO-8583 as a fixed length field with four subfields,
            but only the first subfield is used. A 12 position field for the corrected,
            billing amount of a customer's transaction, in the billing currency. The
            field is right justified, with lead zero fill.
          format: double
          type: number
        businessTransaction:
          description: This flag is used to mark or unmark a transaction as a business
            transaction.
          type: boolean
        cardHashID:
          description: This field contains the unique card identifier generated while
            new/add-on card issuance.
          type: string
        cardTransactionAmount:
          description: This field contains the amount of a card transaction.
          format: double
          type: number
        childCustomerHashId:
          description: This field refers to a unique identifier, known as customerHashId,
            assigned to an individual customer who is associated with a corporate
            customer at the parent level. This identifier serves the purpose of distinguishing
            and tracking the child-level customer within a given client's program.
            By utilizing this identifier, it becomes possible to establish and maintain
            the appropriate linkage between the child customer and their parent corporate
            customer, ensuring accurate association and management of customer data.
          type: string
        clientHashId:
          description: Unique client identifier generated and shared before API handshake.
          type: string
        comments:
          description: This field contains the auto-generated comments with details
            on the transactions such as reason for transaction decline.
          type: string
        complianceStatus:
          description: 'This field contains the compliance status of the transaction.The
            possible values are:

            NULL

            IN_PROGRESS

            ACTION_REQUIRED

            RFI_REQUESTED

            RFI_RESPONDED

            COMPLETED

            ERROR

            REJECT

            EXPIRED'
          enum:
          - NONE
          - IN_PROGRESS
          - COMPLETED
          - ACTION_REQUIRED
          - ERROR
          - REJECT
          - EXPIRED
          - RFI_REQUESTED
          - RFI_RESPONDED
          - UNKNOWN
          - INITIATED
          - PENDING
          - CLEAR
          - CLOSED
          type: string
        createdAt:
          description: This field contains the date and time of transaction when created
            in UTC.
          format: date-time
          type: string
        currentWithHoldingBalance:
          description: This field will be deprecated in the future.
          format: double
          type: number
        customerHashId:
          description: This field contains the unique customer identifier generated
            while new customer created.
          type: string
        dateOfTransaction:
          description: This field contains the date on which the transaction occurred
            in yyyy-MM-dd format.
          format: date-time
          type: string
        debit:
          description: This field contains the flag signifies if the transaction is
            a debit transaction.
          type: boolean
        effectiveAuthAmount:
          description: This field contains an effective authorization amount which
            includes fees, markup, etc.
          format: double
          type: number
        labels:
          additionalProperties:
            type: string
          description: This object will contain different key-value pairs depending
            upon the type of transaction. Essentially, this object will contain different
            labels based on the type of transaction. The list will change over time
            depending on different use-cases. Refer to the [Glossary of Labels](/apis/docs/transaction-response-labels).
          type: object
        localDate:
          description: This field contains the local date of the transaction.
          type: string
        localTime:
          description: This field contains the local time of the transaction.
          type: string
        maskedCardNumber:
          description: This field contains the 16-digit masked card number in format
            1234-56xx-xxxx-3456.
          type: string
        mcc:
          description: This field contains the four-digit Merchant Category Code.
          type: string
        merchantCategory:
          description: This field contains the merchant category such as Airlines,
            Hotels, Shopping, etc.
          type: string
        merchantCity:
          description: This field contains the city name of the merchant.
          type: string
        merchantCountry:
          description: This field contains the country of the merchant.
          type: string
        merchantID:
          description: This field contains the unique merchant identifier.
          type: string
        merchantLatitude:
          description: This field contains the latitude of the merchant captured during
            geo-tagging.
          type: string
        merchantLongitude:
          description: This field contains the longitude of the merchant captured
            during geo-tagging.
          type: string
        merchantName:
          description: This field contains the name of the merchant.
          type: string
        merchantNameLocation:
          description: This field contains the full merchant name and location data
            as received from network.
          type: string
        merchantTaggedName:
          description: This field contains the tagged name of the merchant.
          type: string
        merchantZoomIndex:
          description: This field contains the merchant map zoom index.
          type: string
        originalAuthorizationCode:
          description: This field contains the authorization code of the original
            transaction in case of reversal.
          type: string
        partnerReferenceNumber:
          description: This field contains the provided by an RHA client in response
            to an authorization.
          type: string
        paymentInstrumentHashId:
          description: This field contains the unique payment instrument identifier
            generated for the linked card.
          type: string
        posConditionCode:
          description: 'This field contains the pos condition code that describes
            the condition under which the transaction takes place at the point of
            service.

            00 - Normal transaction

            01 - Cardholder not present

            03 - Merchant suspicious

            08 - Mail/telephone order

            51 - Account Verification Message(AVM)

            55 - ICC Capable Branch ATM

            59 - Electronic Commerce

            90 - Recurring Payment'
          type: string
        posEntryCapabilityCode:
          description: 'This field provides information about the terminal used at
            the point of service.Type of terminal field values include:0 - Unspecified

            2 - Unattended terminal(customer-operated)

            4 - Electronic cash register

            7 - Telephone device

            8 - MCAS device

            9 - Mobile acceptance solution(mPOS)

            Capability of terminal field values include:

            0 - Unspecified

            1 - Terminal not used

            2 - Magnetic stripe read capability

            3 - Bar code read capability

            4 - OCR read capability

            5 - Integrated circuit card read capability

            9 - Terminal does not read card data

            '
          type: string
        posEntryMode:
          description: "This field contains the pos entry code that identifies the\
            \ actual method used to capture the account number and expiration date,\
            \ and the PIN capture capability of the terminal.This is a fixed\u2011\
            length field with three subfields, as follows:\n1. Positions 1\u20112\
            \ - PAN and Date Entry Mode: This is a two\u2011digit code that identifies\
            \ the actual method used at the point of service to enter the cardholder\
            \ account number and card expiry date.\n00 - Unknown\n01 - Keyed transaction\n\
            02 - Magnetic stripe read\n05 - Chip was read at the terminal\n07 - Contactless\n\
            90 - Magnetic stripe read and transmitted unaltered\n91 - Contactless\
            \ - Magnetic stripe data (MSD) transmitted\n2. Position 3 - PIN Entry\
            \ Capability: This is a one\u2011digit code that identifies the capability\
            \ of the authorization terminal, if one was used, to capture PINs. This\
            \ coding does not necessarily mean that a PIN was entered or is included\
            \ in this message:\n0 - Unknown\n1 - Terminal can accept PINs\n2 - Terminal\
            \ cannot accept PINs\n3 - mPOS terminal can accept software-based PINs\
            \ (Mastercard only)\n3. Position 4 - Unused(filler): This is one digit\
            \ of filler, which must be zero.\n"
          type: string
        previousBalance:
          description: This field contains the previous balance in the wallet.
          format: double
          type: number
        processingCode:
          description: This field contains the processing code is a 6 character Visa
            field. Refer to the [link](https://en.wikipedia.org/wiki/ISO_8583#Processing_code)
            for more details on the processing code.
          type: string
        receiptFileName:
          description: This field contains the name of the receipt file.
          type: string
        receiptType:
          description: "This field contains the receipt type.Expected values are as\
            \ follows: \nimage/png\nimage/jpg\nimage/jpeg\napplication/pdf"
          type: string
        retrievalReferenceNumber:
          description: This field contains the 12 digit number that is used with other
            data elements as a key to identify and track all messages related to a
            given customer transaction.
          type: string
        rfiDetails:
          description: This field is an array that holds RFI details.
          items:
            $ref: '#/components/schemas/TransactionRfiDetailsResponse'
          type: array
        rhaTransactionId:
          description: This field contains the transaction Id for an RHA client.
          type: string
        settlementAmount:
          description: This field contains the settlement amount of a transaction.
            This amount is valid only for a settled transaction.
          format: double
          type: number
        settlementAuthAmount:
          description: This field contains the settlement auth amount of a transaction.
            This amount is valid only for a settled transaction.
          format: double
          type: number
        settlementBillingAmount:
          format: double
          type: number
        settlementCurrency:
          type: string
        settlementDate:
          description: This field contains the settlement date in case of a Settled
            transaction. Otherwise, it is null.
          type: string
        settlementStatus:
          description: "This field contains the settlement status.This field can take\
            \ the following values:\nUnsettled\nSettled\n Released\nDisputed\nDisputeClosed\n\
            Waived"
          enum:
          - APPROVED
          - DECLINED
          - BLOCKED
          - SETTLED
          - UNSETTLED
          - REVERSAL
          - RELEASED
          - PENDING
          - WAIVED
          - DISPUTED
          - DISPUTE_CLOSED
          - IN_PROGRESS
          - REJECTED
          - RETURNED
          - AWAITING_FUNDS
          - EXPIRED
          - CANCELLED
          - SCHEDULED
          - NA
          type: string
        settlementTransactionAmount:
          format: double
          type: number
        status:
          description: 'This field contains the status. This field can take the following
            values:

            Pending: Transaction authorization is awaiting success or failure.

            Approved: Transaction is successfully authorized.

            Rejected: Transaction is rejected due to NIUM risk and compliance policies.

            Declined: Transaction is declined.

            Reversal: Transaction is reversed.

            Blocked: Transaction is blocked'
          enum:
          - APPROVED
          - DECLINED
          - BLOCKED
          - SETTLED
          - UNSETTLED
          - REVERSAL
          - RELEASED
          - PENDING
          - WAIVED
          - DISPUTED
          - DISPUTE_CLOSED
          - IN_PROGRESS
          - REJECTED
          - RETURNED
          - AWAITING_FUNDS
          - EXPIRED
          - CANCELLED
          - SCHEDULED
          - NA
          type: string
        systemTraceAuditNumber:
          description: This field contains the system trace audit number assigned
            to uniquely identify a transaction.
          type: string
        terminalID:
          description: This field contains the unique terminal ID.
          type: string
        transactionCurrencyCode:
          description: This field contains the 3-letter [ISO-4217 currency code](doc:currency-and-country-codes)
            for the transaction currency.
          type: string
        transactionReplacementAmount:
          description: The corrected amount of a transaction in a partial reversal.
            This is defined by ISO-8583 as a fixed length field with four subfields,
            but only the first subfield is used. A 12 position field for the corrected,
            actual amount of a customer's transaction, in the transaction currency.
            The field is right justified, with lead zero fill.
          format: double
          type: number
        transactionType:
          description: This field contains the transaction can be one of the complete
            list of transactions mentioned in [Transaction Types](doc:transactions#transaction-types).
          enum:
          - Debit
          - Reversal
          - Original_Credit
          - Original_Credit_Reversal
          - Balance_Inquiry
          - Partial_Reversal
          - Reversal_Advice
          - Decline_Advice
          - Incremental_Auth_Reversal
          - Auto_Sweep
          - Auto_Sweep_Payout
          - Auto_Sweep_Payout_Reversal
          - Settlement_Debit
          - Settlement_Credit
          - Settlement_Reversal
          - Settlement_Direct_Reversal
          - Settlement_Direct_Debit
          - Fee_Debit
          - Fee_Reversal
          - Fee_Waiver
          - Client_Prefund
          - Client_Refund
          - Wallet_Refund
          - Wallet_Credit_Mode_Card
          - Wallet_Credit_Mode_Prefund
          - Wallet_Credit_Mode_Prefund_Cross_Currency
          - Wallet_Credit_Mode_Offline
          - Wallet_Credit_Mode_Offline_Cross_Currency
          - Wallet_Credit_Mode_Offline_ThirdParty
          - Wallet_Credit_Mode_Direct_Debit
          - Wallet_Credit_Mode_Direct_Debit_Reversal
          - Customer_Wallet_Credit_Fund_Transfer
          - Customer_Wallet_Debit_Fund_Transfer
          - Wallet_Fund_Transfer
          - Client_Fund_Transfer
          - Wallet_Hold
          - Wallet_Unhold
          - Remittance_Debit
          - Remittance_Debit_External
          - Remittance_Reversal
          - Remittance_Client_Auto_Sweep
          - Remittance_Client_Auto_Sweep_Reversal
          - Remittance_Debit_Prescreening
          - Remittance_Debit_External_Prescreening
          - Remittance_Bene_Microdeposit
          - Remittance_Bene_Microdeposit_Reversal
          - Regulatory_Auto_Sweep
          - Regulatory_Block
          - Regulatory_Block_Release
          - Regulatory_Debit
          - Regulatory_Debit_Reversal
          - Transfer_Local
          - Transfer_Local_Reversal
          - Cashback_Credit
          - Cashback_Credit_Client
          - Chargeback_Credit
          - Customer_Wallet_Debit_Intra_Region
          - Customer_Wallet_Credit_Intra_Region
          - Customer_Wallet_Debit_Cross_Region
          - Customer_Wallet_Credit_Cross_Region
          - Direct_Debit_Payout
          - NA
          type: string
        updatedAt:
          description: This field contains the date and time when the transaction
            was last updated in UTC.
          format: date-time
          type: string
        walletHashId:
          description: This field contains the unique wallet identifier generated
            while new wallet created.
          type: string
      title: Transaction response
      type: object
    TransactionRfiDetailsResponse:
      properties:
        description:
          description: This field contains the description of the RFI.
          type: string
        documentType:
          description: This field contains the type of the document if applicable,
            for example, POI, POA, etc.
          type: string
        mandatory:
          description: This flag signifies if the RFI is mandatory or not.
          type: boolean
        remarks:
          description: This field contains the remarks provided while raising the
            RFI.
          type: string
        requiredData:
          description: This array contains the required data for the RFI.
          items:
            $ref: '#/components/schemas/WalletRfiAttributeResponse'
          type: array
        rfiHashId:
          description: This field contains the unique RFI hash ID.
          type: string
        rfiId:
          description: This field contains the unique identifier for group of RFI
            raised for the customer transaction.
          type: string
        rfiStatus:
          description: This field contains Transaction RFI status.
          enum:
          - NONE
          - IN_PROGRESS
          - COMPLETED
          - ACTION_REQUIRED
          - ERROR
          - REJECT
          - EXPIRED
          - RFI_REQUESTED
          - RFI_RESPONDED
          - UNKNOWN
          - INITIATED
          - PENDING
          - CLEAR
          - CLOSED
          type: string
        transactionEntityType:
          description: 'This field contains the type of the transaction entity. The
            possible values are:

            DEBTOR

            CREDITOR'
          enum:
          - DEBTOR
          - CREDITOR
          type: string
        type:
          description: This field contains the type of RFI. It could be document or
            data.
          type: string
      title: TransactionRfiDetailsResponse
      type: object
    TransactionsBusinessDTO:
      properties:
        businessTransaction:
          description: This flag is used to mark or unmark a transaction as a business
            transaction.
          example: true
          type: boolean
      required:
      - businessTransaction
      title: Transactions business
      type: object
    TransactionsLocationDTO:
      properties:
        merchantLatitude:
          description: This field accepts the merchant location latitude.
          example: '28.532094'
          type: string
        merchantLongitude:
          description: This field accepts the merchant location longitude.
          example: '77.01632'
          type: string
        merchantTaggedName:
          description: This field accepts the merchant tagged name.
          example: STARBUCKS
          type: string
        merchantZoomIndex:
          description: This field accepts the merchant map zoom index.
          example: '4'
          type: string
      required:
      - merchantLatitude
      - merchantLongitude
      - merchantTaggedName
      - merchantZoomIndex
      title: Transactions location
      type: object
    TransactionsReceiptDTO:
      properties:
        document:
          description: This field contains the receipt as uploaded in Base64 encoded
            format.
          example: iVBORw0KGgoAAAANSUhEU...<Base64 Encoded Image or Document>
          type: string
        receiptFileName:
          description: This field contains the name of the file as uploaded.
          example: receipt_1.png
          type: string
        receiptType:
          description: This field contains the file type of the uploaded receipt.
          enum:
          - image/png
          - image/jpg
          - image/jpeg
          - application/pdf
          example: image/png
          type: string
      required:
      - document
      - receiptFileName
      - receiptType
      title: Transactions receipt
      type: object
    WalletBalanceResponseDTO:
      properties:
        balance:
          description: The available amount in the pocket.
          example: 10
          format: double
          type: number
        curSymbol:
          description: This field contains the 3-letter [ISO-4217 currency code](doc:currency-and-country-codes)
            for the pocket currency.
          example: SGD
          type: string
        default:
          type: boolean
        isoCode:
          description: The [3-digit ISO numeric code](https://www.currency-iso.org/en/home/tables/table-a1.html)
            for the currency.
          example: '702'
          type: string
        mccData:
          description: The mccData is an array that contains multiple objects. Each
            object is a mccCode for which the pocket has restrictions.
          items:
            $ref: '#/components/schemas/MerchantCategoryResponseDTO2'
          type: array
        pocketName:
          description: This is the name of the pocket defined under base currency.
          example: Food
          type: string
        withHoldingBalance:
          description: The amount blocked by NIUM.
          example: 10
          format: double
          type: number
      title: Wallet balance response
      type: object
    WalletTransactionsResponseDTO:
      properties:
        content:
          items:
            $ref: '#/components/schemas/TransactionResponseDTO'
          type: array
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
      title: Wallet transactions response
      type: object
  securitySchemes:
    default:
      in: header
      name: x-api-key
      type: apiKey
security:
- default: []
